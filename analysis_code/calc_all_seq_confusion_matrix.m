function [ cm ] = calc_all_seq_confusion_matrix(dirname,nseqs)
% Written by Benjamin Ballintyn (2018) email: bbal@brandeis.edu
% This function computes the confusion
% matrix for the network specified by dirname using all of the sequences
% that were run 
% Inputs: 
% 1. dirname: path to directory containing the data of the network to
%             analyze
% 2. nseqs:   The number of sequences that were run (or should be analyzed)
% Outputs:
% 1. cm: (nseqs x nseqs) matrix where each entry (i,j) gives the fraction of
%        times where the final network activity resulting from test sequence j
%        was identified as most closely matching the mean activity
%        resulting from averaging across the Ntrials of sequence i
% NOTE: this function uses the actual firing rate values to compute the
% confusion matrix. This allows sequences to be classified by using
% differences in firing rates down to machine precision. As a result the
% confusion matrices generated by this function were not used in the paper
xtr = load([dirname '/x_train.mat']); xtr=xtr.x;
xtst = load([dirname '/x_test.mat']); xtst=xtst.x;
tgt_p = load([dirname '/params.mat']); tgt_p=tgt_p.p;
tst_p = load([dirname '/params.mat']); tst_p=tst_p.p;
cm = zeros(nseqs,nseqs);
for i=1:nseqs % test sequence
    disp(['Test sequence ' num2str(i)])
    for j=1:tgt_p.Ntrials % trial of test sequence
        disp(['Trial ' num2str(j)])
        best = 0;
        best_dif = intmax;
        for k=1:nseqs % target sequence
            disp(['Target sequence ' num2str(k)])
            tgt = mean(xtr(((k-1)*tgt_p.Ntrials+1):k*tgt_p.Ntrials,:),1);
            tst = xtst((i-1)*tst_p.Ntrials+j,:);
            taxi_dist = sum(abs(tst-tgt));
            disp(['Diff = ' num2str(taxi_dist)])
            if (taxi_dist < best_dif)
                best_dif = taxi_dist;
                best = k;
                disp(['New best = ' num2str(best)])
            end
        end
        cm(best,i) = cm(best,i)+1;
    end
end
cm = cm/tgt_p.Ntrials;
end